# Цель работы: научиться составлять и решать системы линейных уравнений в numpy
# Даны точки на плоскости: (j, j), (j + i, j + 2i), (j + 2i, j - 2i), (j + 3i, 2j - i2), (j + 4i, 2j + i), (j + 5i, 2j - i / 2)
# Найти:
# 1. Многочлен минимальной степень (y = a0 + a1 x + a2 x2 + ...), проходящий через все точки.
# 1а. Определить порядок многочлена (зависит от количества точек)
# 1б. Написать многочлен в общем виде
# 1в. Подставить каждую точку в формулу многочлена, составить систему уравнений.
# 1г. Представить систему уравнений в матричном виде, решить с помощью numpy
# Система уравнений вида:
# Ax = b
# где A -- матрица коэффициентов, b -- матрица результатов, x - матрица неизвестных
# решается с помощью функции:
# x = np.linalg.solve(A, b)
# 2. Записать формулу получившегося многочлена, построить график, сделать выводы.
# Примечание:
# В данной задаче неизвестными являются коэффициенты многочлена, а координаты точек (x и y) известны изначально.
# Для составления системы уравнений удобно представить точки в виде двух одномерных матриц:
#
# И находить различные степени x, возводя первую матрицу в степень поэлементно.
# Важно. Чтобы не возникало переполнения массивов при возведении в большую степень, следует значения точек представить в виде float (например не 60, а 60.0)
# Для составления матрицы коэффициентов системы уравнений можно создать пустую матрицу нужного размера и вставлять в неё нужные элементы:
# A = np.empty((n,n))
# A[:,0]=x
# A[:,1]=x_v_kvadrate
# Для построения графика с помощью библиотеки matplotlib.pyplot можно использовать функции:
# pyplot.plot(x,y) – линия, pyplot.scatter(x,y) – только точки на графике
